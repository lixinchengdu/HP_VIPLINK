//  (c) Copyright 2013 Hewlett-Packard Development Company, L.P.
//  Autogenerated
package com.netlab.viplink.api;

import java.util.UUID;

import com.netlab.viplink.model.SwitchFlow;
import com.hp.api.NotFoundException;

import com.hp.api.Id;
import com.hp.of.lib.OpenflowException;
import com.hp.of.lib.dt.DataPathId;
import com.hp.util.ip.BigPortNumber;
import com.hp.util.ip.IpAddress;
import com.hp.util.ip.IpProtocol;
import com.hp.util.ip.MacAddress;
import com.hp.util.ip.PortNumber;
import com.hp.util.ip.TcpUdpPort;
import com.hp.util.ip.VlanId;

import java.util.Collection;

/**
 * Sample SwitchFlow service interface.
 */
public interface SwitchFlowService {

    /**
     * Get all SwitchFlow items.
     *
     * @return collection of all SwitchFlow items
     */
    public Collection<SwitchFlow> getAll();

    /** 
     * Creates a new SwitchFlow entity
     * @param name
     * @param dpid
     * @param srcip
     * @param dstip
     * @param protl
     * @param dstport
     * @param outport
     * @return new SwitchFlow Object
     * @throws OpenflowException 
     * @throws Exception 
     * @throws CreateException if 
     * the arguments contain null or 
     * the name is not specified or
     * transportation protocol unspecified or 
     * flow with the same name exists or
     * fail to install rule in switch
     */
    public SwitchFlow create(String name, DataPathId dpid, IpAddress srcip, IpAddress srcipmask, 
    		IpAddress dstip, IpAddress dstipmask,  
			  IpProtocol protl, PortNumber dstport, MacAddress insrcmac, MacAddress indstmac, 
			  MacAddress outsrcmac, MacAddress outdstmac, VlanId invlan, VlanId outvlan, 
			  BigPortNumber inport, BigPortNumber outport, Integer pushvlan) throws Exception;
    

    /**
     * Get the SwitchFlow with the specified unique id.
     *
     * @param uid unique id of the SwitchFlow entity to be retrieved
     * @return SwitchFlow with the given unique id
     * @throws NotFoundException if the requested SwitchFlow was not found
     */
    public SwitchFlow get(Id<SwitchFlow, UUID> id);

    /**
     * Delete the SwitchFlow with the specified id.
     *
     * @param uid unique id of the SwitchFlow entity to be deleted
     * @return deleted SwitchFlow
     * @throws OpenflowException 
     * @throws NotFoundException if the requested SwitchFlow was not found
     */
    public void delete(Id<SwitchFlow, UUID> id) throws OpenflowException;
    
    public void install(Id<SwitchFlow, UUID> id, SwitchFlow s) throws OpenflowException;
    
    
    /**
     * Get all SwitchFlow items in a switch (controller records)
     * @param dpid
     * @return collections of SwitchFlow items record in the controller 
     * @throws NotFoundException if the DataPath Id is not found
     */
    public Collection<SwitchFlow> getFlowByDpid(DataPathId dpid);
    
    /**
     * Delete all SwitchFlow items in a switch (both controller records and switch forwarding entries)
     * @param dpid
     * @throws OpenflowException 
     * @throws NotFoundException if the DataPath Id is not found
     */
    public void deleteFlowByDpid(DataPathId dpid) throws OpenflowException;
    
    /**
     * Delete a SwitchFlow by name (both controller record and switch forwarding entry)
     * @param name
     * @throws OpenflowException 
     * @throws NotFoundException if the name is not found in controller record
     */
    public void deleteFlowByName(String name) throws OpenflowException;
    
    /**
     * Delete all SwitchFlow items (both controller records and switch forwarding entries) 
     * @throws OpenflowException 
     */
    public void deleteAll() throws OpenflowException;
    
    /**
     * Refine a flow with transportation port and incoming physical interface if matched flowEntry is found
     * @param dpid
     * @param srcip
     * @param dstip
     * @param protl
     * @param srcport
     * @param dstport
     * @param inport
     * @return retrieved output physical interface from SwitchFlow for PacketOut
     * @throws OpenflowException 
     */
    public Id<SwitchFlow, UUID> refineFlow(DataPathId dpid, MacAddress srcmac, IpAddress srcip, IpAddress dstip, 
			  IpProtocol protl, PortNumber srcport, PortNumber dstport, long cookie) throws OpenflowException;
    
   // public void loopfree();
    

}
