//  (c) Copyright 2013 Hewlett-Packard Development Company, L.P.
//  Autogenerated
package com.netlab.viplink.rs;

import com.hp.of.lib.OpenflowException;
import com.hp.of.lib.dt.DataPathId;
import com.hp.sdn.rs.misc.ControllerResource;
import com.hp.util.ip.BigPortNumber;
import com.hp.util.ip.IpAddress;
import com.hp.util.ip.IpProtocol;
import com.hp.util.ip.MacAddress;
import com.hp.util.ip.PortNumber;
import com.hp.util.ip.TcpUdpPort;
import com.hp.util.ip.VlanId;

import java.util.UUID;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import javax.ws.rs.GET;
import javax.ws.rs.DELETE;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.ResponseBuilder;
import javax.ws.rs.core.Response.Status;
import javax.ws.rs.core.Response.StatusType;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.ObjectNode;

import com.netlab.viplink.model.SwitchFlow;
import com.netlab.viplink.api.SwitchFlowService;


import com.hp.api.CreateException;
import com.hp.api.Id;

/**
 * Sample SwitchFlow REST API resource.
 */
@Path("VIP")
public class SwitchFlowResource extends ControllerResource {

    /**
     * Gets JSON array of all SwitchFlow items.
     * <p>
     * Normal Response Code(s): ok (200)
     * <p>
     * Error Response Codes: unauthorized (401), forbidden (403), badMethod
     * (405), serviceUnavailable (503)
     * 
     * @return JSON array
     */
    @GET
    @Produces(MediaType.APPLICATION_JSON)
    public Response getAll() {
        SwitchFlowService svc = get(SwitchFlowService.class);

        ObjectMapper mapper = new ObjectMapper();
        ObjectNode root = mapper.createObjectNode();
        List<JsonNode> nodes = new ArrayList<JsonNode>();
        for (SwitchFlow s : svc.getAll())
            nodes.add(json(s, mapper));

        ArrayNode rowNode = root.putArray("VIP");
        rowNode.addAll(nodes);

        return ok(root.toString()).build();
    }
    

    /**
     * Creates a new SwitchFlow and registers it.
     * <p>
     * Normal Response Code(s): ok (200)
     * <p>
     * Error Response Codes: badRequest (400), unauthorized (401), forbidden (403), 
     * badMethod (405), serviceUnavailable (503)
     * 
     * @param request JSON representation of a SwitchFlow to be created
     * @return JSON object
     */
    
    @POST
    @Path("store")
    @Produces(MediaType.APPLICATION_JSON)
    public Response store(String request) {
        SwitchFlowService svc = get(SwitchFlowService.class);

        // Decode request
        ObjectMapper mapper = new ObjectMapper();
        JsonNode root = parse(mapper, request, "SwitchFlow data");
        JsonNode node = root.path("item");
 
        String name = exists(node, "name") ? node.path("name").asText() : null;
        DataPathId dpid = exists(node, "dpid") ? DataPathId.valueOf(node.path("dpid").asText()) : null;
        IpAddress srcip = exists(node, "srcip") ? IpAddress.valueOf(node.path("srcip").asText()) : null;
        IpAddress srcipmask = exists(node, "srcipmask")? IpAddress.valueOf(node.path("srcipmask").asText()) : null;
        IpAddress dstip = exists(node, "dstip") ? IpAddress.valueOf(node.path("dstip").asText()) : null;
        IpAddress dstipmask = exists(node, "dstipmask") ? IpAddress.valueOf(node.path("dstipmask").asText()) : null;
        IpProtocol protl = exists(node, "protl") ? IpProtocol.valueOf(node.path("protl").asText()) : null;
        PortNumber dstport = exists(node, "dstport") ? PortNumber.valueOf(node.path("dstport").asText()) : null;
        BigPortNumber inport = exists(node, "inport") ? BigPortNumber.valueOf(node.path("inport").asText()) : null;
        BigPortNumber outport = exists(node, "outport") ? BigPortNumber.valueOf(node.path("outport").asText()) : null;
        VlanId invlan = exists(node, "invlan") ? VlanId.valueOf(node.path("invlan").asText()) : null;
        VlanId outvlan = exists(node, "outvlan") ? VlanId.valueOf(node.path("outvlan").asText()) : null;
        Integer pushvlan = exists(node, "pushvlan") ? Integer.parseInt(node.path("pushvlan").asText()) : null;
        MacAddress insrcmac = exists(node, "insrcmac")? MacAddress.valueOf(node.path("insrcmac").asText()) : null;
        MacAddress indstmac = exists(node, "indstmac")? MacAddress.valueOf(node.path("indstmac").asText()) : null;
        MacAddress outsrcmac = exists(node, "outsrcmac")? MacAddress.valueOf(node.path("outsrcmac").asText()) : null;
        MacAddress outdstmac = exists(node, "outdstmac")? MacAddress.valueOf(node.path("outdstmac").asText()) : null;
        
        try {
        // Call the service
        SwitchFlow s = svc.create(name, dpid, srcip, srcipmask, dstip, dstipmask, protl, dstport, insrcmac, indstmac, 
        		outsrcmac, outdstmac, invlan, outvlan, inport, outport, pushvlan);

        // Encode response
        return response(s, mapper).build();
        } catch(OpenflowException e){
        	return Response.status(Status.SERVICE_UNAVAILABLE).entity(e.getMessage()).build();
        }
        	catch(CreateException e){
        		return Response.status(Status.BAD_REQUEST).entity(e.getMessage()).build();
        	}
        	catch (Exception e){
        		return Response.status(Status.INTERNAL_SERVER_ERROR).entity(e.getMessage()).build();
        	}
    }

    /**
     * Gets the specified SwitchFlow by its identifier.
     * <p>
     * Normal Response Code(s): ok (200)
     * <p>
     * Error Response Codes: badRequest (400), unauthorized (401), forbidden (403), 
     * badMethod (405), serviceUnavailable (503), itemNotFound (404)
     * 
     * @param uid the SwitchFlow unique identifier
     * @return JSON object
     */
    
    @GET
    @Path("{uid}")
    @Produces(MediaType.APPLICATION_JSON)
    public Response get(@PathParam("uid") String uid) {
        SwitchFlowService svc = get(SwitchFlowService.class);
        Id<SwitchFlow, UUID> id = Id.valueOf(UUID.fromString(uid));
        SwitchFlow s = svc.get(id);

        // Encode response
        return response(s, new ObjectMapper()).build();
    }
    
    @GET
    @Path("list/{dpid}")
    @Produces(MediaType.APPLICATION_JSON)
    public Response listGet(@PathParam("dpid") String _dpid) {
        SwitchFlowService svc = get(SwitchFlowService.class);
        DataPathId dpid = DataPathId.valueOf(_dpid);
        Collection<SwitchFlow> flowSet = svc.getFlowByDpid(dpid);
        
        ObjectMapper mapper = new ObjectMapper();
        ObjectNode root = mapper.createObjectNode();
        List<JsonNode> nodes = new ArrayList<JsonNode>();
        for (SwitchFlow s : flowSet)
            nodes.add(json(s, mapper));
        
        ArrayNode rowNode = root.putArray("VIP/list/" + _dpid);
        rowNode.addAll(nodes);

        return ok(root.toString()).build();
    }
    

    /**
     * Deletes the specified SwitchFlow.
     * <p>
     * Normal Response Code(s): ok (200)
     * <p>
     * Error Response Codes: badRequest (400), unauthorized (401), forbidden (403), 
     * badMethod (405), serviceUnavailable (503), itemNotFound (404)
     * 
     * @param uid the SwitchFlow unique identifier
     * @return no data
     */
    
    @GET
    @Path("clear/{dpid}")
    @Produces(MediaType.APPLICATION_JSON)
    public Response clearDelete(@PathParam("dpid") String _dpid) {
        SwitchFlowService svc = get(SwitchFlowService.class);
        DataPathId dpid = DataPathId.valueOf(_dpid);
        try {
			svc.deleteFlowByDpid(dpid);
			return Response.ok().build();
		} catch (OpenflowException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return Response.status(Status.SERVICE_UNAVAILABLE).entity(e.getMessage()).build();
		}
        // Encode response
        
    }
   
    
    @GET
    @Path("clear/all")
    @Produces(MediaType.APPLICATION_JSON)
    public Response clearDeleteAll(){
    	SwitchFlowService svc = get(SwitchFlowService.class);
    	try {
			svc.deleteAll();
			return Response.ok().build();
		} catch (OpenflowException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return Response.status(Status.SERVICE_UNAVAILABLE).entity(e.getMessage()).build();
		}
    	
    }
    
    @DELETE
    @Path("{uid}")
    @Produces(MediaType.APPLICATION_JSON)
    public Response delete(@PathParam("uid") String uid) {
        SwitchFlowService svc = get(SwitchFlowService.class);
        Id<SwitchFlow, UUID> id = Id.valueOf(UUID.fromString(uid));
        try {
			svc.delete(id);
			return Response.ok().build();
		} catch (OpenflowException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return Response.status(Status.SERVICE_UNAVAILABLE).entity(e.getMessage()).build();
		}
        // Encode response
        
    }
    
    @POST
    @Path("delete")
    @Produces(MediaType.APPLICATION_JSON)
    public Response deleteflow(String request) {
        SwitchFlowService svc = get(SwitchFlowService.class);
        ObjectMapper mapper = new ObjectMapper();
        JsonNode root = parse(mapper, request, "SwitchFlow data");
        JsonNode node = root.path("item");
        
        String name = exists(node, "name") ? node.path("name").asText() : null;
        try {
			svc.deleteFlowByName(name);
			return Response.ok().build();
		} catch (OpenflowException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return Response.status(Status.SERVICE_UNAVAILABLE).entity(e.getMessage()).build();
		}
        // Encode response
        
    }

    // Encode the response builder for the specified SwitchFlow
    private ResponseBuilder response(SwitchFlow s, ObjectMapper mapper) {
        ObjectNode r = mapper.createObjectNode();
        r.put("item", json(s, mapper));
        return ok(r.toString());
    }

    /**
     * Returns JSON string describing the given SwitchFlow information.
     * 
     * @param s the SwitchFlow
     * @param mapper JSON object mapper
     * @return the JSON node representing the specified SwitchFlow information
     */
    static JsonNode json(SwitchFlow s, ObjectMapper mapper) {
        ObjectNode node = mapper.createObjectNode();
        node.put("uid", s.getId().getValue().toString());
        node.put("name", s.name());
        node.put("dpid", s.dpid().toString());
        node.put("srcip",s.srcip().toString());
        node.put("srcipmask", s.srcipmask().toString());
        node.put("dstip", s.dstip().toString());
        node.put("dstipmask", s.dstipmask().toString());
        node.put("protl", s.protl().toString());
        if (!s.srcport().equals(PortNumber.valueOf(0))){
        	node.put("srcport", s.srcport().toString());
        } else{
        	node.put("srcport", "null");
        }
        
        node.put("dstport", s.dstport().toString());
        
        if (!s.inport().equals(BigPortNumber.valueOf(0))) {
        	node.put("inport", s.inport().toString());
        } else {
        	node.put("inport", "null");
        }
        
        if (s.invlan().equals(VlanId.valueOf(0))){
        	node.put("invlan", "null");
        }	else{
        	node.put("invlan", s.invlan().toString());
        }
        
        node.put("outvlan", s.outvlan().toString());
        node.put("outport", s.outport().toString());
        node.put("pushvlan", String.valueOf(s.pushvlan()));
        node.put("insrcmac", s.insrcmac().toString());
        node.put("indstmac", s.indstmac().toString());
        node.put("outsrcmac", s.outsrcmac().toString());
        node.put("outdstmac", s.outdstmac().toString());
        
        
        return node;
    }

}
